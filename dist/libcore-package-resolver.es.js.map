{"version":3,"file":"libcore-package-resolver.es.js","sources":["../src/packager.js"],"sourcesContent":["'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nconst INVALID_NAME = \"Invalid Package [name] parameter.\",  \n    INVALID_NAMES = \"Invalid [names] Package collection parameter.\",\n    INVALID_DEPENDENCIES = \"Invalid Package [dependencies] parameter.\";\n\n\nclass Package {\n    constructor(name) {\n        this.id = ':' + name;\n        this.name = name;\n        \n        this.registered = false;\n        this.requires = [];\n\n    }\n}\n\n\nclass Packager {\n\n    constructor() {\n        this.names = [];\n        this.packages = {};\n    }\n\n    exists(names) {\n        var isString = string,\n            list = this.packages,\n            invalidNames = INVALID_NAMES;\n        var len, name, id;\n\n        // string based parameter\n        if (isString(names)) {\n            id = ':' + names;\n            return id in list && list[id].registered;\n        }\n\n        if (!array(names)) {\n            throw new Error(invalidNames);\n        }\n        \n        len = names.length;\n        if (len) {\n            for (; len--;) {\n                name = names[len];\n                \n                if (!isString(name)) {\n                    throw new Error(invalidNames);\n                }\n                \n                id = ':' + name;\n                if (!(id in list) || !list[id].registered) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    register(name, dependencies) {\n\n        var isString = string,\n            names = this.names,\n            list = this.packages,\n            PackageClass = Package;\n        var c, l, dependency, items, il, id, packageObject;\n        \n        if (!isString(name)) {\n            throw new Error(INVALID_NAME);\n        }\n\n        id = ':' + name;\n\n        // try reuse only if not yet registered\n        if (id in list) {\n\n            // overwrite of package should not be possible if finalized\n            if (list[id].registered) {\n                throw new Error(`Package ${name} already exists.`);\n            }\n            packageObject = list[id];\n        }\n        // create new\n        else {\n            names[names.length] = name;\n            list[id] = packageObject = new PackageClass(name);\n        }\n        \n        packageObject.registered = true;\n        \n\n        if (isString(dependencies)) {\n            dependencies = [dependencies];\n        }\n\n        if (array(dependencies)) {\n            items = packageObject.requires;\n            il = 0;\n\n            for (c = -1, l = dependencies.length; l--;) {\n                dependency = dependencies[++c];\n                if (isString(dependency)) {\n                    items[il++] = dependency;\n                }\n\n            }\n\n        }\n        else if (arguments.length > 1) {\n            throw new Error(INVALID_DEPENDENCIES);\n        }\n\n        return this;\n\n    }\n\n    flatten(names) {\n        var list = this.packages,\n            invalidNames = INVALID_NAMES,\n            isString = string;\n        var position, len, name, id, inserted, stack, total,\n            pack, requires, resolved, rl, recursed;\n\n        if (isString(names)) {\n            names = [names];\n        }\n\n        if (!array(names)) {\n            throw new Error(invalidNames);\n        }\n\n        total = names.length;\n        recursed = {};\n        inserted = {};\n        stack = null;\n        position = -1;\n        len = total;\n        resolved = [];\n        rl = 0;\n\n\n        for (; len--;) {\n            name = names[++position];\n\n            // validate\n            if (!isString(name)) {\n                throw new Error(invalidNames);\n            }\n\n            id = ':' + name;\n            if (!(id in list)) {\n                throw new Error(`Package ${name} do not exist.`);\n            }\n\n            pack = list[id];\n            if (!pack.registered) {\n                throw new Error(`Package ${name} is not registered.`);\n            }\n\n            requires = pack.requires;\n            total = requires.length;\n\n            if (!(id in recursed)) {\n                if (total) {\n                    recursed[id] = true;\n                    stack = {\n                        parent: stack,\n                        ender: name,\n                        c: position,\n                        l: len,\n                        items: names,\n                        rs: resolved\n                    };\n\n                    names = requires;\n                    len = total;\n                    position = -1;\n                    resolved = [];\n                    rl = 0;\n                    \n                    continue;\n                }\n                // add leaf\n                else if (!(id in inserted)) {\n                    resolved[rl++] =\n                        inserted[id] = name;\n                }\n            }\n\n            // end?\n            if (!len) {\n                // pop\n                for (; stack; ) {\n                    // pop!\n                    len = stack.l;\n                    name = stack.ender;\n                    position = stack.c;\n                    names = stack.rs;\n                    names.push.apply(names, resolved);\n                    resolved = names;\n                    names = stack.items;\n                    rl = resolved.length;\n\n                    stack = stack.parent;\n                    \n\n                    // included ender\n                    id = ':' + name;\n                    if (!(id in inserted)) {\n                        resolved[rl++] = \n                            inserted[id] = name;\n                    }\n\n                    if (len) {\n                        break;\n                    }\n\n                }\n\n            }\n\n        }\n\n        return resolved;\n\n    }\n}\n\n\nexport default Packager;\n\nexport { Packager };\n"],"names":["const","Packager"],"mappings":"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"}