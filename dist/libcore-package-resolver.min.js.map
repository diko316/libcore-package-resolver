{"version":3,"file":"libcore-package-resolver.min.js","sources":["../src/packager.js"],"sourcesContent":["'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nconst INVALID_NAME = \"Invalid Package [name] parameter.\",  \n    INVALID_NAMES = \"Invalid [names] Package collection parameter.\",\n    INVALID_DEPENDENCIES = \"Invalid Package [dependencies] parameter.\";\n\n\nclass Package {\n    constructor(name) {\n        this.id = ':' + name;\n        this.name = name;\n        \n        this.registered = false;\n        this.requires = [];\n\n    }\n}\n\n\nclass Packager {\n\n    constructor() {\n        this.names = [];\n        this.packages = {};\n    }\n\n    exists(names) {\n        var isString = string,\n            list = this.packages,\n            invalidNames = INVALID_NAMES;\n        var len, name, id;\n\n        // string based parameter\n        if (isString(names)) {\n            id = ':' + names;\n            return id in list && list[id].registered;\n        }\n\n        if (!array(names)) {\n            throw new Error(invalidNames);\n        }\n        \n        len = names.length;\n        if (len) {\n            for (; len--;) {\n                name = names[len];\n                \n                if (!isString(name)) {\n                    throw new Error(invalidNames);\n                }\n                \n                id = ':' + name;\n                if (!(id in list) || !list[id].registered) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    register(name, dependencies) {\n\n        var isString = string,\n            names = this.names,\n            list = this.packages,\n            PackageClass = Package;\n        var c, l, dependency, items, il, id, packageObject;\n        \n        if (!isString(name)) {\n            throw new Error(INVALID_NAME);\n        }\n\n        id = ':' + name;\n\n        // try reuse only if not yet registered\n        if (id in list) {\n\n            // overwrite of package should not be possible if finalized\n            if (list[id].registered) {\n                throw new Error(`Package ${name} already exists.`);\n            }\n            packageObject = list[id];\n        }\n        // create new\n        else {\n            names[names.length] = name;\n            list[id] = packageObject = new PackageClass(name);\n        }\n        \n        packageObject.registered = true;\n        \n\n        if (isString(dependencies)) {\n            dependencies = [dependencies];\n        }\n\n        if (array(dependencies)) {\n            items = packageObject.requires;\n            il = 0;\n\n            for (c = -1, l = dependencies.length; l--;) {\n                dependency = dependencies[++c];\n                if (isString(dependency)) {\n                    items[il++] = dependency;\n                }\n\n            }\n\n        }\n        else if (arguments.length > 1) {\n            throw new Error(INVALID_DEPENDENCIES);\n        }\n\n        return this;\n\n    }\n\n    flatten(names) {\n        var list = this.packages,\n            invalidNames = INVALID_NAMES,\n            isString = string;\n        var position, len, name, id, inserted, stack, total,\n            pack, requires, resolved, rl, recursed;\n\n        if (isString(names)) {\n            names = [names];\n        }\n\n        if (!array(names)) {\n            throw new Error(invalidNames);\n        }\n\n        total = names.length;\n        recursed = {};\n        inserted = {};\n        stack = null;\n        position = -1;\n        len = total;\n        resolved = [];\n        rl = 0;\n\n\n        for (; len--;) {\n            name = names[++position];\n\n            // validate\n            if (!isString(name)) {\n                throw new Error(invalidNames);\n            }\n\n            id = ':' + name;\n            if (!(id in list)) {\n                throw new Error(`Package ${name} do not exist.`);\n            }\n\n            pack = list[id];\n            if (!pack.registered) {\n                throw new Error(`Package ${name} is not registered.`);\n            }\n\n            requires = pack.requires;\n            total = requires.length;\n\n            if (!(id in recursed)) {\n                if (total) {\n                    recursed[id] = true;\n                    stack = {\n                        parent: stack,\n                        ender: name,\n                        c: position,\n                        l: len,\n                        items: names,\n                        rs: resolved\n                    };\n\n                    names = requires;\n                    len = total;\n                    position = -1;\n                    resolved = [];\n                    rl = 0;\n                    \n                    continue;\n                }\n                // add leaf\n                else if (!(id in inserted)) {\n                    resolved[rl++] =\n                        inserted[id] = name;\n                }\n            }\n\n            // end?\n            if (!len) {\n                // pop\n                for (; stack; ) {\n                    // pop!\n                    len = stack.l;\n                    name = stack.ender;\n                    position = stack.c;\n                    names = stack.rs;\n                    names.push.apply(names, resolved);\n                    resolved = names;\n                    names = stack.items;\n                    rl = resolved.length;\n\n                    stack = stack.parent;\n                    \n\n                    // included ender\n                    id = ':' + name;\n                    if (!(id in inserted)) {\n                        resolved[rl++] = \n                            inserted[id] = name;\n                    }\n\n                    if (len) {\n                        break;\n                    }\n\n                }\n\n            }\n\n        }\n\n        return resolved;\n\n    }\n}\n\n\nexport default Packager;\n\nexport { Packager };\n"],"names":["const","INVALID_NAMES","Package","name","this","id","registered","requires","Packager","names","packages","exists","len","isString","string","list","invalidNames","array","Error","length","register","dependencies","c","l","dependency","items","il","packageObject","PackageClass","arguments","flatten","position","inserted","stack","total","pack","resolved","rl","recursed","parent","ender","rs","push","apply"],"mappings":"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"}